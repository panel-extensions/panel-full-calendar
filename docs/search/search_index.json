{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u2728 panel-full-calendar","text":"<p>  Extends HoloViz Panel with FullCalendar capabilities</p>"},{"location":"#features","title":"Features","text":"<p><code>panel-full-calendar</code> integrates the powerful FullCalendar JavaScript library with the Panel ecosystem, enabling interactive calendar widgets directly in Python applications. It provides the ability to:</p> <ul> <li>Display and interact with calendars in various views (day, week, month).</li> <li>Add, update, and remove events programmatically or through user interactions.</li> <li>Customize the calendar's appearance, event handling, and toolbar controls.</li> <li>Enable event dragging, resizing, and date selection callbacks.</li> <li>Handle recurring events and complex scheduling logic.</li> </ul> <p>This widget is perfect for building dashboards, scheduling applications, and any interface that requires robust calendar functionality.</p>"},{"location":"#pin-your-version","title":"Pin Your Version","text":"<p>This project is in its early stages, so if you find a version that suits your needs, it\u2019s recommended to pin your version, as updates may introduce breaking changes.</p> <p>To pin your version in <code>requirements.txt</code>, specify the version explicitly:</p> <pre><code>panel-full-calendar==0.x.x\n</code></pre> <p>Or in <code>pyproject.toml</code>:</p> <pre><code>[tool.poetry.dependencies]\npanel-full-calendar = \"0.x.x\"\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<p>Install <code>panel-full-calendar</code> via <code>pip</code>:</p> <pre><code>pip install panel-full-calendar\n</code></pre> <p>Alternatively, add it to your <code>pyproject.toml</code>:</p> <pre><code>[tool.poetry.dependencies]\npanel-full-calendar = \"^0.x.x\"\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>To use the calendar in a Panel application:</p> <pre><code>import panel as pn\nfrom panel_full_calendar import Calendar\n\npn.extension(\"fullcalendar\")\n\n# Create a basic calendar widget\ncalendar = Calendar(sizing_mode=\"stretch_width\")\ncalendar.show()\n</code></pre>"},{"location":"#development","title":"Development","text":"<pre><code>git clone https://github.com/panel-extensions/panel-full-calendar\ncd panel-full-calendar\n</code></pre> <p>For a simple setup use <code>uv</code>:</p> <pre><code>uv venv\nsource .venv/bin/activate # on linux. Similar commands for windows and osx\nuv pip install -e .[dev]\npre-commit run install\npytest tests\n</code></pre> <p>For the full Github Actions setup use pixi:</p> <pre><code>pixi run pre-commit-install\npixi run postinstall\npixi run test\n</code></pre> <p>This repository is based on copier-template-panel-extension. To update to the latest template version run:</p> <pre><code>pixi exec --spec copier --spec ruamel.yaml -- copier update --defaults --trust\n</code></pre> <p>Note: <code>copier</code> will show <code>Conflict</code> for files with manual changes during an update. This is normal. As long as there are no merge conflict markers, all patches applied cleanly.</p>"},{"location":"#contributing","title":"\u2764\ufe0f Contributing","text":"<p>Contributions are welcome! Please follow these steps to contribute:</p> <ol> <li>Fork the repository.</li> <li>Create a new branch: <code>git checkout -b feature/YourFeature</code>.</li> <li>Make your changes and commit them: <code>git commit -m 'Add some feature'</code>.</li> <li>Push to the branch: <code>git push origin feature/YourFeature</code>.</li> <li>Open a pull request.</li> </ol> <p>Please ensure your code adheres to the project's coding standards and passes all tests.</p> <p>If you encounter issues or want to request features, please submit a GitHub issue.</p>"},{"location":"examples/","title":"Examples","text":"<pre><code>import panel as pn\n\nfrom panel_full_calendar import Calendar\n\npn.extension()\n\ndef update_date_clicked(event):\n    date_clicked.object = f\"Date clicked: {event['startStr']}\"\n\n\ndate_clicked = pn.pane.Markdown()\ncalendar = Calendar(\n    selectable=True,\n    select_callback=update_date_clicked,\n    sizing_mode=\"stretch_width\",\n)\npn.Column(date_clicked, calendar)\n</code></pre>"},{"location":"examples/#basics","title":"Basics","text":"<pre><code>calendar = Calendar(sizing_mode=\"stretch_width\")\ncalendar\n</code></pre> <p>The current date that the calendar initially displays can be set with <code>current_date</code>, but only upon instantiation.</p> <pre><code>calendar = Calendar(current_date=\"2008-08-08\", sizing_mode=\"stretch_width\")\ncalendar\n</code></pre> <p>Afterwards, you can use the <code>go_to_date</code> method to programmatically change the date.</p> <p>Dates can be ISO8601 strings, e.g. <code>2018-06-01T12:30:00</code>, millisecond time, e.g. <code>1537302134028</code> (Tue Sep 18 2018 16:22:14 GMT-0400), or datetime objects, e.g. <code>datetime.datetime(2028, 08, 18)</code>. See FullCalendar date parsing docs for more info.</p> <pre><code>now = datetime.datetime.now()\ncalendar.go_to_date(now)\n</code></pre> <p>The calendar can be limited to a specific date range by setting <code>valid_range</code>.</p> <pre><code>calendar.valid_range = {\n    \"start\": now - datetime.timedelta(days=2),\n    \"end\": now + datetime.timedelta(days=2),\n}\n</code></pre>"},{"location":"examples/#events","title":"Events","text":"<p>Events can be added through <code>value</code> as a list of dictionaries.</p> <pre><code>calendar.value = [\n    {\n        \"start\": now,\n        \"end\": now + datetime.timedelta(minutes=30),\n        \"title\": \"Calendar Tutorial\",\n    },\n    {\n        \"start\": now,\n        \"allDay\": True,\n        \"title\": \"Enjoying Panel\",\n    },\n]\n</code></pre> <p>Alternatively, an event can be added through the method <code>add_event</code>. Valid event keys can be found on the FullCalendar Event Parsing docs.</p> <pre><code>calendar.add_event(\n    title=\"Bi-Weekly Event\",\n    startRecur=\"2024-10-22\",\n    daysOfWeek=[2],  # 2 represents Tuesday (0 = Sunday, 1 = Monday, ...)\n    startTime=\"06:30:00\",\n    endTime=\"07:30:00\",\n    duration=\"01:00\",\n)\n</code></pre> <p>Note, the keys can be defined in <code>snake_case</code> or <code>camelCase</code> as long as <code>event_keys_auto_camel_case=True</code>, which pre-processes the keys into <code>camelCase</code> internally.</p> <p>The following is equivalent to above.</p> <pre><code>calendar.add_event(\n    title=\"Bi-Weekly Event\",\n    start_recur=\"2024-10-22\",\n    days_of_week=[2],\n    start_time=\"06:30:00\",\n    end_time=\"07:30:00\",\n    duration=\"01:00\",\n)\n</code></pre> <p>If there are many events or if the events are large, use <code>camelCase</code> and set <code>event_keys_auto_camel_case=False</code> to speed up rendering.</p>"},{"location":"examples/#views","title":"Views","text":"<p>The initial view can be set with <code>current_view</code>, but only during instantiation.</p> <pre><code>calendar = Calendar(current_view=\"timeGridDay\", sizing_mode=\"stretch_width\")\ncalendar\n</code></pre> <p>After, it can only be programmatically changed with <code>change_view</code>, or through user interaction on the header/footer toolbar.</p> <pre><code>calendar.change_view(\"timeGridWeek\")\n</code></pre> <p>The header/footer toolbar's can be customized to subset the available views users can toggle. This also reduces the number of plugins loaded, which can benefit rendering speed.</p> <p>Please see the FullCalendar headerToolbar docs for full customizability.</p> <pre><code>calendar = Calendar(\n    header_toolbar={\n        \"left\": \"title\",\n        \"center\": \"\",\n        \"right\": \"prev,next today\",\n    },\n    sizing_mode=\"stretch_width\",\n)\ncalendar\n</code></pre>"},{"location":"examples/#interaction","title":"Interaction","text":"<p>The calendars' events can be dragged and dropped with <code>editable=True</code>.</p> <pre><code>now = datetime.datetime.now()\ncalendar = Calendar(\n    value=[\n        {\"title\": \"Drag and drop me to reschedule!\", \"start\": now},\n    ],\n    editable=True,\n    sizing_mode=\"stretch_width\",\n)\ncalendar\n</code></pre> <p>It's possible to watch for dropped events by setting <code>event_drop_callback</code>, resulting in output like:</p> <pre><code>{\n    \"oldEvent\": {\n        \"allDay\": False,\n        \"title\": \"Drag and drop me to reschedule!\",\n        \"start\": \"2024-10-24T16:12:41.154-07:00\",\n    },\n    \"event\": {\n        \"allDay\": False,\n        \"title\": \"Drag and drop me to reschedule!\",\n        \"start\": \"2024-10-17T16:12:41.154-07:00\",\n    },\n    \"relatedEvents\": [],\n    \"el\": {...},\n    \"delta\": {\"years\": 0, \"months\": 0, \"days\": -7, \"milliseconds\": 0},\n    \"jsEvent\": {\"isTrusted\": True},\n    \"view\": {\n        \"type\": \"dayGridMonth\",\n        \"dateEnv\": {...},\n    },\n}\n</code></pre> <pre><code>calendar.event_drop_callback = lambda event: print(event)\n</code></pre> <p>Dates can also be selected by setting <code>selectable=True</code> and selections can also be watched with <code>select_callback</code>, which you can use to update other Panel components.</p> <pre><code>def update_date_clicked(event):\n    date_clicked.object = f\"Date clicked: {event['startStr']}\"\n\ndate_clicked = pn.pane.Markdown()\ncalendar = Calendar(\n    selectable=True,\n    select_callback=update_date_clicked,\n    sizing_mode=\"stretch_width\",\n)\npn.Column(date_clicked, calendar)\n</code></pre>"},{"location":"examples/#additional-resources","title":"Additional Resources","text":"<p>FullCalendar is full of features and options, so be sure to check out the full list of options in the FullCalendar docs.</p> <p>Note, not all functionality has been ported over--if there's one you want, please submit a GitHub issue.</p>"},{"location":"reference/panel_full_calendar/","title":"Reference","text":"<p>Accessible imports for the panel_full_calendar package.</p>"},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar","title":"<code>Calendar</code>","text":"<p>               Bases: <code>JSComponent</code></p> <p>The Calendar widget is a wrapper around the FullCalendar library.</p> <p>See https://fullcalendar.io/docs for more information on the parameters.</p> Source code in <code>src/panel_full_calendar/main.py</code> <pre><code>class Calendar(JSComponent):\n    \"\"\"\n    The Calendar widget is a wrapper around the FullCalendar library.\n\n    See https://fullcalendar.io/docs for more information on the parameters.\n    \"\"\"\n\n    all_day_maintain_duration = param.Boolean(\n        default=False,\n        doc=\"Determines how an event's duration should be mutated when it is dragged from a timed section to an all-day section and vice versa.\",\n    )\n\n    aspect_ratio = param.Number(default=None, doc=\"Sets the width-to-height aspect ratio of the calendar.\")\n\n    business_hours = param.Dict(default={}, doc=\"Emphasizes certain time slots on the calendar.\")\n\n    button_icons = param.Dict(\n        default={},\n        doc=\"Icons that will be displayed in buttons of the header/footer toolbar.\",\n    )\n\n    button_text = param.Dict(\n        default={},\n        doc=\"Text that will be displayed on buttons of the header/footer toolbar.\",\n    )\n\n    current_date = param.String(\n        default=None,\n        constant=True,\n        doc=\"The onload or current date of the calendar view. Use go_to_date() to change the date.\",\n    )\n\n    current_date_callback = param.Callable(\n        default=None,\n        doc=\"A callback that will be called when the current date changes.\",\n    )\n\n    current_view = param.Selector(\n        default=\"dayGridMonth\",\n        objects=[\n            \"dayGridMonth\",\n            \"dayGridWeek\",\n            \"dayGridDay\",\n            \"timeGridWeek\",\n            \"timeGridDay\",\n            \"listWeek\",\n            \"listMonth\",\n            \"listYear\",\n            \"multiMonthYear\",\n        ],\n        constant=True,\n        doc=\"The onload or current view of the calendar. Use change_view() to change the view.\",\n    )\n\n    current_view_callback = param.Callable(\n        default=None,\n        doc=\"A callback that will be called when the current view changes.\",\n    )\n\n    date_alignment = param.String(default=None, doc=\"Determines how certain views should be initially aligned.\")\n\n    date_click_callback = param.Callable(\n        default=None,\n        doc=\"A callback that will be called when a date is clicked.\",\n    )\n\n    date_increment = param.String(\n        default=None,\n        doc=\"The duration to move forward/backward when prev/next is clicked.\",\n    )\n\n    day_max_event_rows = param.Integer(\n        default=False,\n        doc=(\n            \"In dayGrid view, the max number of stacked event levels within a given day. \"\n            \"This includes the +more link if present. The rest will show up in a popover.\"\n        ),\n    )\n\n    day_max_events = param.Integer(\n        default=None,\n        doc=(\"In dayGrid view, the max number of events within a given day, not counting the +more link. \" \"The rest will show up in a popover.\"),\n    )\n\n    day_popover_format = param.Dict(\n        default=None,\n        doc=\"Determines the date format of title of the popover created by the moreLinkClick option.\",\n    )\n\n    display_event_end = param.Boolean(\n        default=None,\n        doc=\"Whether or not to display an event's end time.\",\n    )\n\n    display_event_time = param.Boolean(\n        default=True,\n        doc=\"Whether or not to display the text for an event's date/time.\",\n    )\n\n    drag_revert_duration = param.Integer(\n        default=500,\n        doc=\"Time it takes for an event to revert to its original position after an unsuccessful drag.\",\n    )\n\n    drag_scroll = param.Boolean(\n        default=True,\n        doc=\"Whether to automatically scroll the scroll-containers during event drag-and-drop and date selecting.\",\n    )\n\n    editable = param.Boolean(\n        default=False,\n        doc=\"Determines whether the events on the calendar can be modified.\",\n    )\n\n    event_background_color = param.Color(\n        default=None,\n        doc=\"Sets the background color for all events on the calendar.\",\n    )\n\n    event_border_color = param.Color(\n        default=None,\n        doc=\"Sets the border color for all events on the calendar.\",\n    )\n\n    event_color = param.Color(\n        default=None,\n        doc=\"Sets the background and border colors for all events on the calendar.\",\n    )\n\n    event_click_callback = param.Callable(\n        default=None,\n        doc=\"A callback that will be called when an event is clicked.\",\n    )\n\n    event_display = param.String(\n        default=\"auto\",\n        doc=\"Controls which preset rendering style events use.\",\n    )\n\n    event_drag_min_distance = param.Integer(\n        default=5,\n        doc=\"How many pixels the user's mouse/touch must move before an event drag activates.\",\n    )\n\n    event_drag_start_callback = param.Callable(\n        default=None,\n        doc=\"Triggered when event dragging begins.\",\n    )\n\n    event_drag_stop_callback = param.Callable(\n        default=None,\n        doc=\"Triggered when event dragging stops.\",\n    )\n\n    event_drop_callback = param.Callable(\n        default=None,\n        doc=\"Triggered when dragging stops and the event has moved to a different day/time.\",\n    )\n\n    event_duration_editable = param.Boolean(\n        default=True,\n        doc=\"Allow events' durations to be editable through resizing.\",\n    )\n\n    event_keys_auto_camel_case = param.Boolean(\n        default=True,\n        doc=(\n            \"Whether to automatically convert value and event keys to camelCase for convenience. \"\n            \"However, this can slow down the widget if there are many events or if the events are large.\"\n        ),\n    )\n\n    event_max_stack = param.Integer(\n        default=None,\n        doc=\"For timeline view, the maximum number of events that stack top-to-bottom. For timeGrid view, the maximum number of events that stack left-to-right.\",\n    )\n\n    event_order = param.String(\n        default=\"start,-duration,title,allDay\",\n        doc=\"Determines the ordering events within the same day.\",\n    )\n\n    event_order_strict = param.Boolean(\n        default=False,\n        doc=\"Ensures the eventOrder setting is strictly followed.\",\n    )\n\n    event_resize_callback = param.Callable(\n        default=None,\n        doc=\"Triggered when resizing stops and the event has changed in duration.\",\n    )\n\n    event_resize_start_callback = param.Callable(\n        default=None,\n        doc=\"Triggered when event resizing begins.\",\n    )\n\n    event_resize_stop_callback = param.Callable(\n        default=None,\n        doc=\"Triggered when event resizing stops.\",\n    )\n\n    event_resizable_from_start = param.Boolean(\n        default=True,\n        doc=\"Whether the user can resize an event from its starting edge.\",\n    )\n\n    event_start_editable = param.Boolean(\n        default=True,\n        doc=\"Allow events' start times to be editable through dragging.\",\n    )\n\n    event_text_color = param.Color(\n        default=None,\n        doc=\"Sets the text color for all events on the calendar.\",\n    )\n\n    event_time_format = param.Dict(\n        default=None,\n        doc=\"Determines the time-text that will be displayed on each event.\",\n    )\n\n    expand_rows = param.Boolean(\n        default=False,\n        doc=\"If the rows of a given view don't take up the entire height, they will expand to fit.\",\n    )\n\n    footer_toolbar = param.Dict(default={}, doc=\"Defines the buttons and title at the bottom of the calendar.\")\n\n    handle_window_resize = param.Boolean(\n        default=True,\n        doc=\"Whether to automatically resize the calendar when the browser window resizes.\",\n    )\n\n    header_toolbar = param.Dict(\n        default={\n            \"left\": \"prev,next today\",\n            \"center\": \"title\",\n            \"right\": \"dayGridMonth,timeGridWeek,timeGridDay\",\n        },\n        doc=\"Defines the buttons and title at the top of the calendar.\",\n    )\n\n    more_link_click = param.String(\n        default=\"popover\",\n        doc='Determines the action taken when the user clicks on a \"more\" link created by the dayMaxEventRows or dayMaxEvents options.',\n    )\n\n    multi_month_max_columns = param.Integer(\n        default=1,\n        doc=\"Determines the maximum number of columns in the multi-month view.\",\n    )\n\n    nav_links = param.Boolean(\n        default=True,\n        doc=\"Turns various datetime text into clickable links that the user can use for navigation.\",\n    )\n\n    next_day_threshold = param.String(\n        default=\"00:00:00\",\n        doc=\"When an event's end time spans into another day, the minimum time it must be in order for it to render as if it were on that day.\",\n    )\n\n    now_indicator = param.Boolean(default=True, doc=\"Whether to display an indicator for the current time.\")\n\n    progressive_event_rendering = param.Boolean(\n        default=False,\n        doc=\"When to render multiple asynchronous event sources in an individual or batched manner.\",\n    )\n\n    selectable = param.Boolean(\n        default=False,\n        doc=\"Allows a user to highlight multiple days or timeslots by clicking and dragging.\",\n    )\n\n    select_callback = param.Callable(\n        default=None,\n        doc=\"A callback that will be called when a selection is made.\",\n    )\n\n    select_mirror = param.Boolean(\n        default=False,\n        doc=\"Whether to draw a 'placeholder' event while the user is dragging.\",\n    )\n\n    unselect_auto = param.Boolean(\n        default=True,\n        doc=\"Whether clicking elsewhere on the page will cause the current selection to be cleared.\",\n    )\n\n    unselect_cancel = param.String(\n        default=None,\n        doc=\"A way to specify elements that will ignore the unselectAuto option.\",\n    )\n\n    select_allow = param.Callable(\n        default=None,\n        doc=\"Exact programmatic control over where the user can select.\",\n    )\n\n    select_min_distance = param.Integer(\n        default=0,\n        doc=\"The minimum distance the user's mouse must travel after a mousedown, before a selection is allowed.\",\n    )\n\n    show_non_current_dates = param.Boolean(\n        default=False,\n        doc=\"Whether to display dates in the current view that don't belong to the current month.\",\n    )\n\n    snap_duration = param.String(\n        default=None,\n        doc=\"The time interval at which a dragged event will snap to the time axis. Also affects the granularity at which selections can be made.\",\n    )\n\n    sticky_footer_scrollbar = param.Boolean(\n        default=True,\n        doc=\"Whether to fix the view's horizontal scrollbar to the bottom of the viewport while scrolling.\",\n    )\n\n    sticky_header_dates = param.String(\n        default=None,\n        doc=\"Whether to fix the date-headers at the top of the calendar to the viewport while scrolling.\",\n    )\n\n    time_zone = param.String(\n        default=\"local\",\n        doc=\"Determines the time zone the calendar will use to display dates.\",\n    )\n\n    title_format = param.Dict(\n        default=None,\n        doc=\"Determines the text that will be displayed in the header toolbar's title.\",\n    )\n\n    title_range_separator = param.String(\n        default=\" to \",\n        doc=\"Determines the separator text when formatting the date range in the toolbar title.\",\n    )\n\n    unselect_callback = param.Callable(\n        default=None,\n        doc=\"A callback that will be called when a selection is cleared.\",\n    )\n\n    valid_range = param.Dict(\n        default=None,\n        doc=(\"Dates outside of the valid range will be grayed-out and inaccessible. \" \"Can have `start` and `end` keys, but both do not need to be together.\"),\n    )\n\n    value = param.List(default=[], item_type=dict, doc=\"List of events to display on the calendar.\")\n\n    views = param.Dict(\n        default={},\n        doc=(\"Options to pass to only to specific calendar views. \" \"Provide separate options objects within the views option, keyed by the name of your view.\"),\n    )\n\n    window_resize_delay = param.Integer(\n        default=100,\n        doc=\"The time the calendar will wait to adjust its size after a window resize occurs, in milliseconds.\",\n    )\n\n    _esm = MODELS_DIR / \"fullcalendar.js\"\n\n    _syncing = param.Boolean(default=False)\n\n    _rename = {\n        # callbacks are handled in _handle_msg getattr\n        \"current_date_callback\": None,\n        \"current_view_callback\": None,\n        \"date_click_callback\": None,\n        \"event_click_callback\": None,\n        \"event_drag_start_callback\": None,\n        \"event_drag_stop_callback\": None,\n        \"event_drop_callback\": None,\n        \"event_resize_callback\": None,\n        \"event_resize_start_callback\": None,\n        \"event_resize_stop_callback\": None,\n        \"select_callback\": None,\n        \"unselect_callback\": None,\n    }\n\n    _importmap = {\n        \"imports\": {\n            \"@fullcalendar/core\": \"https://cdn.skypack.dev/@fullcalendar/core@6.1.15\",\n            \"@fullcalendar/daygrid\": \"https://cdn.skypack.dev/@fullcalendar/daygrid@6.1.15\",\n            \"@fullcalendar/timegrid\": \"https://cdn.skypack.dev/@fullcalendar/timegrid@6.1.15\",\n            \"@fullcalendar/list\": \"https://cdn.skypack.dev/@fullcalendar/list@6.1.15\",\n            \"@fullcalendar/multimonth\": \"https://cdn.skypack.dev/@fullcalendar/multimonth@6.1.15\",\n            \"@fullcalendar/interaction\": \"https://cdn.skypack.dev/@fullcalendar/interaction@6.1.15\",\n        }\n    }\n\n    def __init__(self, **params):\n        \"\"\"Create a new Calendar widget.\"\"\"\n        super().__init__(**params)\n        if self.event_keys_auto_camel_case:\n            self.value = [self._to_camel_case_keys(event) for event in self.value]\n        self.param.watch(\n            self._update_options,\n            [\n                \"all_day_maintain_duration\",\n                \"aspect_ratio\",\n                \"business_hours\",\n                \"button_icons\",\n                \"button_text\",\n                \"date_alignment\",\n                \"date_increment\",\n                \"day_max_event_rows\",\n                \"day_max_events\",\n                \"day_popover_format\",\n                \"display_event_end\",\n                \"display_event_time\",\n                \"drag_revert_duration\",\n                \"drag_scroll\",\n                \"editable\",\n                \"event_background_color\",\n                \"event_border_color\",\n                \"event_color\",\n                \"event_display\",\n                \"event_drag_min_distance\",\n                \"event_duration_editable\",\n                \"event_max_stack\",\n                \"event_order\",\n                \"event_order_strict\",\n                \"event_resizable_from_start\",\n                \"event_start_editable\",\n                \"event_text_color\",\n                \"event_time_format\",\n                \"expand_rows\",\n                \"footer_toolbar\",\n                \"handle_window_resize\",\n                \"header_toolbar\",\n                \"more_link_click\",\n                \"multi_month_max_columns\",\n                \"nav_links\",\n                \"next_day_threshold\",\n                \"now_indicator\",\n                \"progressive_event_rendering\",\n                \"selectable\",\n                \"select_mirror\",\n                \"unselect_auto\",\n                \"unselect_cancel\",\n                \"select_allow\",\n                \"select_min_distance\",\n                \"show_non_current_dates\",\n                \"snap_duration\",\n                \"sticky_footer_scrollbar\",\n                \"sticky_header_dates\",\n                \"time_zone\",\n                \"title_format\",\n                \"title_range_separator\",\n                \"valid_range\",\n                \"value\",\n                \"window_resize_delay\",\n            ],\n        )\n\n    def click_next(self) -&gt; None:\n        \"\"\"Click the next button through the calendar's UI.\"\"\"\n        self._send_msg({\"type\": \"next\"})\n\n    def click_prev(self) -&gt; None:\n        \"\"\"Click the previous button through the calendar's UI.\"\"\"\n        self._send_msg({\"type\": \"prev\"})\n\n    def click_prev_year(self) -&gt; None:\n        \"\"\"Click the previous year button through the calendar's UI.\"\"\"\n        self._send_msg({\"type\": \"prevYear\"})\n\n    def click_next_year(self) -&gt; None:\n        \"\"\"Click the next year button through the calendar's UI.\"\"\"\n        self._send_msg({\"type\": \"nextYear\"})\n\n    def click_today(self) -&gt; None:\n        \"\"\"Click the today button through the calendar's UI.\"\"\"\n        self._send_msg({\"type\": \"today\"})\n\n    def change_view(\n        self,\n        view: str,\n        date: str | datetime.datetime | datetime.date | int | None = None,\n    ) -&gt; None:\n        \"\"\"\n        Change the current view of the calendar, and optionally go to a specific date.\n\n        Args:\n            view: The view to change to.\n                Options: \"dayGridMonth\", \"dayGridWeek\", \"dayGridDay\", \"timeGridWeek\", \"timeGridDay\",\n                \"listWeek\", \"listMonth\", \"listYear\", \"multiMonthYear\".\n            date: The date to go to after changing the view; if None, the current date will be used.\n                Supports ISO 8601 date strings, datetime/date objects, and int in milliseconds.\n        \"\"\"\n        self._send_msg({\"type\": \"changeView\", \"view\": view, \"date\": date})\n\n    def go_to_date(self, date: str | datetime.datetime | datetime.date | int) -&gt; None:\n        \"\"\"\n        Go to a specific date on the calendar.\n\n        Args:\n            date: The date to go to.\n                Supports ISO 8601 date strings, datetime/date objects, and int in milliseconds.\n        \"\"\"\n        self._send_msg({\"type\": \"gotoDate\", \"date\": date})\n\n    def increment_date(self, increment: str | datetime.timedelta | int | dict | None = None) -&gt; None:\n        \"\"\"\n        Increment the current date by a specific amount.\n\n        Args:\n            increment: The amount to increment the current date by.\n                Supports a string in the format hh:mm:ss.sss, hh:mm:sss or hh:mm, an int in milliseconds,\n                datetime.timedelta objects, or a dict with any of the following keys:\n                    year, years, month, months, day, days, minute, minutes, second,\n                    seconds, millisecond, milliseconds, ms.\n                If not provided, the date_increment parameter will be used.\n                If date_increment is not set, the default increment for the current view will be used:\n                    dayGridMonth: {\"days\": 1}\n                    dayGridWeek: {\"weeks\": 1}\n                    dayGridDay: {\"days\": 1}\n                    timeGridWeek: {\"weeks\": 1}\n                    timeGridDay: {\"days\": 1}\n                    listWeek: {\"weeks\": 1}\n                    listMonth: {\"months\": 1}\n                    listYear: {\"years\": 1}\n                    multiMonthYear: {\"years\": 1}\n        \"\"\"\n        if increment is None and self.date_increment is None:\n            increment = VIEW_DEFAULT_INCREMENTS[self.current_view]\n        self._send_msg({\"type\": \"incrementDate\", \"increment\": increment})\n\n    def scroll_to_time(self, time: str | datetime.time | int) -&gt; None:\n        \"\"\"\n        Scroll the calendar to a specific time.\n\n        Args:\n            time: The time to scroll to.\n                Supports ISO 8601 time strings, datetime.time objects, and int in milliseconds.\n        \"\"\"\n        self._send_msg({\"type\": \"scrollToTime\", \"time\": time})\n\n    def add_event(\n        self,\n        start: str | datetime.datetime | datetime.date | int | None = None,\n        end: str | datetime.datetime | datetime.date | int | None = None,\n        title: str | None = \"(no title)\",\n        all_day: bool | None = None,\n        display: Literal[\"background\", \"inverse-background\"] | None = None,\n        **kwargs,\n    ) -&gt; None:\n        \"\"\"\n        Add an event to the calendar.\n\n        Args:\n            start: The start date of the event.\n                Supports ISO 8601 date strings, datetime/date objects, and int in milliseconds.\n            end: The end date of the event.\n                Supports ISO 8601 date strings, datetime/date objects, and int in milliseconds.\n                If None, the event will be all-day.\n            title: The title of the event.\n            all_day: Whether the event is an all-day event.\n            display: How the event should be displayed. Options: \"background\", \"inverse-background\".\n            **kwargs: Additional properties to set on the event. Takes precedence over other arguments.\n        \"\"\"\n        if self.event_keys_auto_camel_case:\n            kwargs = self._to_camel_case_keys(kwargs)\n\n        event = {}\n        if start is not None:\n            event[\"start\"] = start\n        if end is not None:\n            event[\"end\"] = end\n        if title is not None:\n            event[\"title\"] = title\n        if all_day is not None:\n            event[\"allDay\"] = all_day\n        if display is not None:\n            event[\"display\"] = display\n        event.update(kwargs)\n        self.value = self.value + [event]\n\n    def _handle_msg(self, msg):\n        if \"current_date\" in msg:\n            current_date_info = json.loads(msg[\"current_date\"])\n            with param.edit_constant(self):\n                self.current_date = current_date_info[\"startStr\"]\n            if self.current_date_callback:\n                self.current_date_callback(current_date_info)\n        elif \"current_view\" in msg:\n            current_view_info = json.loads(msg[\"current_view\"])\n            with param.edit_constant(self):\n                self.current_view = current_view_info[\"view\"][\"type\"]\n            if self.current_view_callback:\n                self.current_view_callback(current_view_info)\n        else:\n            key = list(msg.keys())[0]\n            callback_name = f\"{key}_callback\"\n            callback = getattr(self, callback_name, None)\n            if callback:\n                callback(json.loads(msg[key]))\n\n    def _update_options(self, *events):\n        updates = [\n            {\n                \"key\": (\"events\" if self._to_camel_case(event.name) == \"value\" else self._to_camel_case(event.name)),\n                \"value\": event.new,\n            }\n            for event in events\n        ]\n        self._send_msg({\"type\": \"updateOptions\", \"updates\": updates})\n\n    @staticmethod\n    def _to_camel_case(string):\n        return \"\".join(word.capitalize() if i else word for i, word in enumerate(string.split(\"_\")))\n\n    def _to_camel_case_keys(self, d):\n        return {self._to_camel_case(key) if \"_\" in key else key: val for key, val in d.items()}\n</code></pre>"},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.all_day_maintain_duration","title":"<code>all_day_maintain_duration = param.Boolean(default=False, doc=\"Determines how an event's duration should be mutated when it is dragged from a timed section to an all-day section and vice versa.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.aspect_ratio","title":"<code>aspect_ratio = param.Number(default=None, doc='Sets the width-to-height aspect ratio of the calendar.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.business_hours","title":"<code>business_hours = param.Dict(default={}, doc='Emphasizes certain time slots on the calendar.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.button_icons","title":"<code>button_icons = param.Dict(default={}, doc='Icons that will be displayed in buttons of the header/footer toolbar.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.button_text","title":"<code>button_text = param.Dict(default={}, doc='Text that will be displayed on buttons of the header/footer toolbar.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.current_date","title":"<code>current_date = param.String(default=None, constant=True, doc='The onload or current date of the calendar view. Use go_to_date() to change the date.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.current_date_callback","title":"<code>current_date_callback = param.Callable(default=None, doc='A callback that will be called when the current date changes.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.current_view","title":"<code>current_view = param.Selector(default='dayGridMonth', objects=['dayGridMonth', 'dayGridWeek', 'dayGridDay', 'timeGridWeek', 'timeGridDay', 'listWeek', 'listMonth', 'listYear', 'multiMonthYear'], constant=True, doc='The onload or current view of the calendar. Use change_view() to change the view.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.current_view_callback","title":"<code>current_view_callback = param.Callable(default=None, doc='A callback that will be called when the current view changes.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.date_alignment","title":"<code>date_alignment = param.String(default=None, doc='Determines how certain views should be initially aligned.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.date_click_callback","title":"<code>date_click_callback = param.Callable(default=None, doc='A callback that will be called when a date is clicked.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.date_increment","title":"<code>date_increment = param.String(default=None, doc='The duration to move forward/backward when prev/next is clicked.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.day_max_event_rows","title":"<code>day_max_event_rows = param.Integer(default=False, doc='In dayGrid view, the max number of stacked event levels within a given day. This includes the +more link if present. The rest will show up in a popover.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.day_max_events","title":"<code>day_max_events = param.Integer(default=None, doc='In dayGrid view, the max number of events within a given day, not counting the +more link. The rest will show up in a popover.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.day_popover_format","title":"<code>day_popover_format = param.Dict(default=None, doc='Determines the date format of title of the popover created by the moreLinkClick option.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.display_event_end","title":"<code>display_event_end = param.Boolean(default=None, doc=\"Whether or not to display an event's end time.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.display_event_time","title":"<code>display_event_time = param.Boolean(default=True, doc=\"Whether or not to display the text for an event's date/time.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.drag_revert_duration","title":"<code>drag_revert_duration = param.Integer(default=500, doc='Time it takes for an event to revert to its original position after an unsuccessful drag.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.drag_scroll","title":"<code>drag_scroll = param.Boolean(default=True, doc='Whether to automatically scroll the scroll-containers during event drag-and-drop and date selecting.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.editable","title":"<code>editable = param.Boolean(default=False, doc='Determines whether the events on the calendar can be modified.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.event_background_color","title":"<code>event_background_color = param.Color(default=None, doc='Sets the background color for all events on the calendar.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.event_border_color","title":"<code>event_border_color = param.Color(default=None, doc='Sets the border color for all events on the calendar.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.event_click_callback","title":"<code>event_click_callback = param.Callable(default=None, doc='A callback that will be called when an event is clicked.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.event_color","title":"<code>event_color = param.Color(default=None, doc='Sets the background and border colors for all events on the calendar.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.event_display","title":"<code>event_display = param.String(default='auto', doc='Controls which preset rendering style events use.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.event_drag_min_distance","title":"<code>event_drag_min_distance = param.Integer(default=5, doc=\"How many pixels the user's mouse/touch must move before an event drag activates.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.event_drag_start_callback","title":"<code>event_drag_start_callback = param.Callable(default=None, doc='Triggered when event dragging begins.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.event_drag_stop_callback","title":"<code>event_drag_stop_callback = param.Callable(default=None, doc='Triggered when event dragging stops.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.event_drop_callback","title":"<code>event_drop_callback = param.Callable(default=None, doc='Triggered when dragging stops and the event has moved to a different day/time.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.event_duration_editable","title":"<code>event_duration_editable = param.Boolean(default=True, doc=\"Allow events' durations to be editable through resizing.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.event_keys_auto_camel_case","title":"<code>event_keys_auto_camel_case = param.Boolean(default=True, doc='Whether to automatically convert value and event keys to camelCase for convenience. However, this can slow down the widget if there are many events or if the events are large.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.event_max_stack","title":"<code>event_max_stack = param.Integer(default=None, doc='For timeline view, the maximum number of events that stack top-to-bottom. For timeGrid view, the maximum number of events that stack left-to-right.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.event_order","title":"<code>event_order = param.String(default='start,-duration,title,allDay', doc='Determines the ordering events within the same day.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.event_order_strict","title":"<code>event_order_strict = param.Boolean(default=False, doc='Ensures the eventOrder setting is strictly followed.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.event_resizable_from_start","title":"<code>event_resizable_from_start = param.Boolean(default=True, doc='Whether the user can resize an event from its starting edge.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.event_resize_callback","title":"<code>event_resize_callback = param.Callable(default=None, doc='Triggered when resizing stops and the event has changed in duration.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.event_resize_start_callback","title":"<code>event_resize_start_callback = param.Callable(default=None, doc='Triggered when event resizing begins.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.event_resize_stop_callback","title":"<code>event_resize_stop_callback = param.Callable(default=None, doc='Triggered when event resizing stops.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.event_start_editable","title":"<code>event_start_editable = param.Boolean(default=True, doc=\"Allow events' start times to be editable through dragging.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.event_text_color","title":"<code>event_text_color = param.Color(default=None, doc='Sets the text color for all events on the calendar.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.event_time_format","title":"<code>event_time_format = param.Dict(default=None, doc='Determines the time-text that will be displayed on each event.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.expand_rows","title":"<code>expand_rows = param.Boolean(default=False, doc=\"If the rows of a given view don't take up the entire height, they will expand to fit.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.footer_toolbar","title":"<code>footer_toolbar = param.Dict(default={}, doc='Defines the buttons and title at the bottom of the calendar.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.handle_window_resize","title":"<code>handle_window_resize = param.Boolean(default=True, doc='Whether to automatically resize the calendar when the browser window resizes.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.header_toolbar","title":"<code>header_toolbar = param.Dict(default={'left': 'prev,next today', 'center': 'title', 'right': 'dayGridMonth,timeGridWeek,timeGridDay'}, doc='Defines the buttons and title at the top of the calendar.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.more_link_click","title":"<code>more_link_click = param.String(default='popover', doc='Determines the action taken when the user clicks on a \"more\" link created by the dayMaxEventRows or dayMaxEvents options.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.multi_month_max_columns","title":"<code>multi_month_max_columns = param.Integer(default=1, doc='Determines the maximum number of columns in the multi-month view.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.nav_links","title":"<code>nav_links = param.Boolean(default=True, doc='Turns various datetime text into clickable links that the user can use for navigation.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.next_day_threshold","title":"<code>next_day_threshold = param.String(default='00:00:00', doc=\"When an event's end time spans into another day, the minimum time it must be in order for it to render as if it were on that day.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.now_indicator","title":"<code>now_indicator = param.Boolean(default=True, doc='Whether to display an indicator for the current time.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.progressive_event_rendering","title":"<code>progressive_event_rendering = param.Boolean(default=False, doc='When to render multiple asynchronous event sources in an individual or batched manner.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.select_allow","title":"<code>select_allow = param.Callable(default=None, doc='Exact programmatic control over where the user can select.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.select_callback","title":"<code>select_callback = param.Callable(default=None, doc='A callback that will be called when a selection is made.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.select_min_distance","title":"<code>select_min_distance = param.Integer(default=0, doc=\"The minimum distance the user's mouse must travel after a mousedown, before a selection is allowed.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.select_mirror","title":"<code>select_mirror = param.Boolean(default=False, doc=\"Whether to draw a 'placeholder' event while the user is dragging.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.selectable","title":"<code>selectable = param.Boolean(default=False, doc='Allows a user to highlight multiple days or timeslots by clicking and dragging.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.show_non_current_dates","title":"<code>show_non_current_dates = param.Boolean(default=False, doc=\"Whether to display dates in the current view that don't belong to the current month.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.snap_duration","title":"<code>snap_duration = param.String(default=None, doc='The time interval at which a dragged event will snap to the time axis. Also affects the granularity at which selections can be made.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.sticky_footer_scrollbar","title":"<code>sticky_footer_scrollbar = param.Boolean(default=True, doc=\"Whether to fix the view's horizontal scrollbar to the bottom of the viewport while scrolling.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.sticky_header_dates","title":"<code>sticky_header_dates = param.String(default=None, doc='Whether to fix the date-headers at the top of the calendar to the viewport while scrolling.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.time_zone","title":"<code>time_zone = param.String(default='local', doc='Determines the time zone the calendar will use to display dates.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.title_format","title":"<code>title_format = param.Dict(default=None, doc=\"Determines the text that will be displayed in the header toolbar's title.\")</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.title_range_separator","title":"<code>title_range_separator = param.String(default=' to ', doc='Determines the separator text when formatting the date range in the toolbar title.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.unselect_auto","title":"<code>unselect_auto = param.Boolean(default=True, doc='Whether clicking elsewhere on the page will cause the current selection to be cleared.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.unselect_callback","title":"<code>unselect_callback = param.Callable(default=None, doc='A callback that will be called when a selection is cleared.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.unselect_cancel","title":"<code>unselect_cancel = param.String(default=None, doc='A way to specify elements that will ignore the unselectAuto option.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.valid_range","title":"<code>valid_range = param.Dict(default=None, doc='Dates outside of the valid range will be grayed-out and inaccessible. Can have `start` and `end` keys, but both do not need to be together.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.value","title":"<code>value = param.List(default=[], item_type=dict, doc='List of events to display on the calendar.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.views","title":"<code>views = param.Dict(default={}, doc='Options to pass to only to specific calendar views. Provide separate options objects within the views option, keyed by the name of your view.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.window_resize_delay","title":"<code>window_resize_delay = param.Integer(default=100, doc='The time the calendar will wait to adjust its size after a window resize occurs, in milliseconds.')</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.add_event","title":"<code>add_event(start=None, end=None, title='(no title)', all_day=None, display=None, **kwargs)</code>","text":"<p>Add an event to the calendar.</p> <p>Parameters:</p> Name Type Description Default <code>start</code> <code>str | datetime | date | int | None</code> <p>The start date of the event. Supports ISO 8601 date strings, datetime/date objects, and int in milliseconds.</p> <code>None</code> <code>end</code> <code>str | datetime | date | int | None</code> <p>The end date of the event. Supports ISO 8601 date strings, datetime/date objects, and int in milliseconds. If None, the event will be all-day.</p> <code>None</code> <code>title</code> <code>str | None</code> <p>The title of the event.</p> <code>'(no title)'</code> <code>all_day</code> <code>bool | None</code> <p>Whether the event is an all-day event.</p> <code>None</code> <code>display</code> <code>Literal['background', 'inverse-background'] | None</code> <p>How the event should be displayed. Options: \"background\", \"inverse-background\".</p> <code>None</code> <code>**kwargs</code> <p>Additional properties to set on the event. Takes precedence over other arguments.</p> <code>{}</code> Source code in <code>src/panel_full_calendar/main.py</code> <pre><code>def add_event(\n    self,\n    start: str | datetime.datetime | datetime.date | int | None = None,\n    end: str | datetime.datetime | datetime.date | int | None = None,\n    title: str | None = \"(no title)\",\n    all_day: bool | None = None,\n    display: Literal[\"background\", \"inverse-background\"] | None = None,\n    **kwargs,\n) -&gt; None:\n    \"\"\"\n    Add an event to the calendar.\n\n    Args:\n        start: The start date of the event.\n            Supports ISO 8601 date strings, datetime/date objects, and int in milliseconds.\n        end: The end date of the event.\n            Supports ISO 8601 date strings, datetime/date objects, and int in milliseconds.\n            If None, the event will be all-day.\n        title: The title of the event.\n        all_day: Whether the event is an all-day event.\n        display: How the event should be displayed. Options: \"background\", \"inverse-background\".\n        **kwargs: Additional properties to set on the event. Takes precedence over other arguments.\n    \"\"\"\n    if self.event_keys_auto_camel_case:\n        kwargs = self._to_camel_case_keys(kwargs)\n\n    event = {}\n    if start is not None:\n        event[\"start\"] = start\n    if end is not None:\n        event[\"end\"] = end\n    if title is not None:\n        event[\"title\"] = title\n    if all_day is not None:\n        event[\"allDay\"] = all_day\n    if display is not None:\n        event[\"display\"] = display\n    event.update(kwargs)\n    self.value = self.value + [event]\n</code></pre>"},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.change_view","title":"<code>change_view(view, date=None)</code>","text":"<p>Change the current view of the calendar, and optionally go to a specific date.</p> <p>Parameters:</p> Name Type Description Default <code>view</code> <code>str</code> <p>The view to change to. Options: \"dayGridMonth\", \"dayGridWeek\", \"dayGridDay\", \"timeGridWeek\", \"timeGridDay\", \"listWeek\", \"listMonth\", \"listYear\", \"multiMonthYear\".</p> required <code>date</code> <code>str | datetime | date | int | None</code> <p>The date to go to after changing the view; if None, the current date will be used. Supports ISO 8601 date strings, datetime/date objects, and int in milliseconds.</p> <code>None</code> Source code in <code>src/panel_full_calendar/main.py</code> <pre><code>def change_view(\n    self,\n    view: str,\n    date: str | datetime.datetime | datetime.date | int | None = None,\n) -&gt; None:\n    \"\"\"\n    Change the current view of the calendar, and optionally go to a specific date.\n\n    Args:\n        view: The view to change to.\n            Options: \"dayGridMonth\", \"dayGridWeek\", \"dayGridDay\", \"timeGridWeek\", \"timeGridDay\",\n            \"listWeek\", \"listMonth\", \"listYear\", \"multiMonthYear\".\n        date: The date to go to after changing the view; if None, the current date will be used.\n            Supports ISO 8601 date strings, datetime/date objects, and int in milliseconds.\n    \"\"\"\n    self._send_msg({\"type\": \"changeView\", \"view\": view, \"date\": date})\n</code></pre>"},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.click_next","title":"<code>click_next()</code>","text":"<p>Click the next button through the calendar's UI.</p> Source code in <code>src/panel_full_calendar/main.py</code> <pre><code>def click_next(self) -&gt; None:\n    \"\"\"Click the next button through the calendar's UI.\"\"\"\n    self._send_msg({\"type\": \"next\"})\n</code></pre>"},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.click_next_year","title":"<code>click_next_year()</code>","text":"<p>Click the next year button through the calendar's UI.</p> Source code in <code>src/panel_full_calendar/main.py</code> <pre><code>def click_next_year(self) -&gt; None:\n    \"\"\"Click the next year button through the calendar's UI.\"\"\"\n    self._send_msg({\"type\": \"nextYear\"})\n</code></pre>"},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.click_prev","title":"<code>click_prev()</code>","text":"<p>Click the previous button through the calendar's UI.</p> Source code in <code>src/panel_full_calendar/main.py</code> <pre><code>def click_prev(self) -&gt; None:\n    \"\"\"Click the previous button through the calendar's UI.\"\"\"\n    self._send_msg({\"type\": \"prev\"})\n</code></pre>"},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.click_prev_year","title":"<code>click_prev_year()</code>","text":"<p>Click the previous year button through the calendar's UI.</p> Source code in <code>src/panel_full_calendar/main.py</code> <pre><code>def click_prev_year(self) -&gt; None:\n    \"\"\"Click the previous year button through the calendar's UI.\"\"\"\n    self._send_msg({\"type\": \"prevYear\"})\n</code></pre>"},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.click_today","title":"<code>click_today()</code>","text":"<p>Click the today button through the calendar's UI.</p> Source code in <code>src/panel_full_calendar/main.py</code> <pre><code>def click_today(self) -&gt; None:\n    \"\"\"Click the today button through the calendar's UI.\"\"\"\n    self._send_msg({\"type\": \"today\"})\n</code></pre>"},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.go_to_date","title":"<code>go_to_date(date)</code>","text":"<p>Go to a specific date on the calendar.</p> <p>Parameters:</p> Name Type Description Default <code>date</code> <code>str | datetime | date | int</code> <p>The date to go to. Supports ISO 8601 date strings, datetime/date objects, and int in milliseconds.</p> required Source code in <code>src/panel_full_calendar/main.py</code> <pre><code>def go_to_date(self, date: str | datetime.datetime | datetime.date | int) -&gt; None:\n    \"\"\"\n    Go to a specific date on the calendar.\n\n    Args:\n        date: The date to go to.\n            Supports ISO 8601 date strings, datetime/date objects, and int in milliseconds.\n    \"\"\"\n    self._send_msg({\"type\": \"gotoDate\", \"date\": date})\n</code></pre>"},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.increment_date","title":"<code>increment_date(increment=None)</code>","text":"<p>Increment the current date by a specific amount.</p> <p>Parameters:</p> Name Type Description Default <code>increment</code> <code>str | timedelta | int | dict | None</code> <p>The amount to increment the current date by. Supports a string in the format hh:mm:ss.sss, hh:mm:sss or hh:mm, an int in milliseconds, datetime.timedelta objects, or a dict with any of the following keys:     year, years, month, months, day, days, minute, minutes, second,     seconds, millisecond, milliseconds, ms. If not provided, the date_increment parameter will be used. If date_increment is not set, the default increment for the current view will be used:     dayGridMonth: {\"days\": 1}     dayGridWeek: {\"weeks\": 1}     dayGridDay: {\"days\": 1}     timeGridWeek: {\"weeks\": 1}     timeGridDay: {\"days\": 1}     listWeek: {\"weeks\": 1}     listMonth: {\"months\": 1}     listYear: {\"years\": 1}     multiMonthYear: {\"years\": 1}</p> <code>None</code> Source code in <code>src/panel_full_calendar/main.py</code> <pre><code>def increment_date(self, increment: str | datetime.timedelta | int | dict | None = None) -&gt; None:\n    \"\"\"\n    Increment the current date by a specific amount.\n\n    Args:\n        increment: The amount to increment the current date by.\n            Supports a string in the format hh:mm:ss.sss, hh:mm:sss or hh:mm, an int in milliseconds,\n            datetime.timedelta objects, or a dict with any of the following keys:\n                year, years, month, months, day, days, minute, minutes, second,\n                seconds, millisecond, milliseconds, ms.\n            If not provided, the date_increment parameter will be used.\n            If date_increment is not set, the default increment for the current view will be used:\n                dayGridMonth: {\"days\": 1}\n                dayGridWeek: {\"weeks\": 1}\n                dayGridDay: {\"days\": 1}\n                timeGridWeek: {\"weeks\": 1}\n                timeGridDay: {\"days\": 1}\n                listWeek: {\"weeks\": 1}\n                listMonth: {\"months\": 1}\n                listYear: {\"years\": 1}\n                multiMonthYear: {\"years\": 1}\n    \"\"\"\n    if increment is None and self.date_increment is None:\n        increment = VIEW_DEFAULT_INCREMENTS[self.current_view]\n    self._send_msg({\"type\": \"incrementDate\", \"increment\": increment})\n</code></pre>"},{"location":"reference/panel_full_calendar/#panel_full_calendar.Calendar.scroll_to_time","title":"<code>scroll_to_time(time)</code>","text":"<p>Scroll the calendar to a specific time.</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>str | time | int</code> <p>The time to scroll to. Supports ISO 8601 time strings, datetime.time objects, and int in milliseconds.</p> required Source code in <code>src/panel_full_calendar/main.py</code> <pre><code>def scroll_to_time(self, time: str | datetime.time | int) -&gt; None:\n    \"\"\"\n    Scroll the calendar to a specific time.\n\n    Args:\n        time: The time to scroll to.\n            Supports ISO 8601 time strings, datetime.time objects, and int in milliseconds.\n    \"\"\"\n    self._send_msg({\"type\": \"scrollToTime\", \"time\": time})\n</code></pre>"}]}
